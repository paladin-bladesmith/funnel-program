/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { type ParsedDistributeRewardsInstruction } from '../instructions';

export const PALADIN_FUNNEL_PROGRAM_ADDRESS =
  'Dbf7u6x15DhjMrBMunY3XoRWdByrCCt2dbyoPrCXN6SQ' as Address<'Dbf7u6x15DhjMrBMunY3XoRWdByrCCt2dbyoPrCXN6SQ'>;

export enum PaladinFunnelInstruction {
  DistributeRewards,
}

export function identifyPaladinFunnelInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PaladinFunnelInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return PaladinFunnelInstruction.DistributeRewards;
  }
  throw new Error(
    'The provided instruction could not be identified as a paladinFunnel instruction.'
  );
}

export type ParsedPaladinFunnelInstruction<
  TProgram extends string = 'Dbf7u6x15DhjMrBMunY3XoRWdByrCCt2dbyoPrCXN6SQ',
> = {
  instructionType: PaladinFunnelInstruction.DistributeRewards;
} & ParsedDistributeRewardsInstruction<TProgram>;
