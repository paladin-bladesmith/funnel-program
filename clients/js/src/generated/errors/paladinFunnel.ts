/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { PALADIN_FUNNEL_PROGRAM_ADDRESS } from '../programs';

/** IncorrectTreasuryAddress: Incorrect treasury address. */
export const PALADIN_FUNNEL_ERROR__INCORRECT_TREASURY_ADDRESS = 0x0; // 0
/** IncorrectStakeProgramAddress: Incorrect stake program address. */
export const PALADIN_FUNNEL_ERROR__INCORRECT_STAKE_PROGRAM_ADDRESS = 0x1; // 1
/** IncorrectRewardsProgramAddress: Incorrect rewards program address. */
export const PALADIN_FUNNEL_ERROR__INCORRECT_REWARDS_PROGRAM_ADDRESS = 0x2; // 2

export type PaladinFunnelError =
  | typeof PALADIN_FUNNEL_ERROR__INCORRECT_REWARDS_PROGRAM_ADDRESS
  | typeof PALADIN_FUNNEL_ERROR__INCORRECT_STAKE_PROGRAM_ADDRESS
  | typeof PALADIN_FUNNEL_ERROR__INCORRECT_TREASURY_ADDRESS;

let paladinFunnelErrorMessages: Record<PaladinFunnelError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  paladinFunnelErrorMessages = {
    [PALADIN_FUNNEL_ERROR__INCORRECT_REWARDS_PROGRAM_ADDRESS]: `Incorrect rewards program address.`,
    [PALADIN_FUNNEL_ERROR__INCORRECT_STAKE_PROGRAM_ADDRESS]: `Incorrect stake program address.`,
    [PALADIN_FUNNEL_ERROR__INCORRECT_TREASURY_ADDRESS]: `Incorrect treasury address.`,
  };
}

export function getPaladinFunnelErrorMessage(code: PaladinFunnelError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (paladinFunnelErrorMessages as Record<PaladinFunnelError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isPaladinFunnelError<
  TProgramErrorCode extends PaladinFunnelError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PALADIN_FUNNEL_PROGRAM_ADDRESS,
    code
  );
}
